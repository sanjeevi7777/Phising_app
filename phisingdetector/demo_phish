{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMi8defm7wWuiJpIydf1+OQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"_WjRMwf_ylrM","executionInfo":{"status":"ok","timestamp":1678892592915,"user_tz":-330,"elapsed":2681,"user":{"displayName":"Sabari Raj N","userId":"10864216411930033689"}}},"outputs":[],"source":["import pickle\n","file='model_pickle'\n","loaded_model=pickle.load(open(file,'rb'))"]},{"cell_type":"code","source":["def main(url):\n","\n","    \n","    status = []\n","    \n","    status.append(having_ip_address(url))\n","    status.append(abnormal_url(url))\n","    status.append(count_dot(url))\n","    status.append(count_www(url))\n","    status.append(count_atrate(url))\n","    status.append(no_of_dir(url))\n","    status.append(no_of_embed(url))\n","    \n","    status.append(shortening_service(url))\n","    status.append(count_https(url))\n","    status.append(count_http(url))\n","    \n","    status.append(count_per(url))\n","    status.append(count_ques(url))\n","    status.append(count_hyphen(url))\n","    status.append(count_equal(url))\n","    \n","    status.append(url_length(url))\n","    status.append(hostname_length(url))\n","    status.append(suspicious_words(url))\n","    status.append(digit_count(url))\n","    status.append(letter_count(url))\n","    status.append(fd_length(url))\n","    tld = get_tld(url,fail_silently=True)\n","      \n","    status.append(tld_length(tld))\n","    return status"],"metadata":{"id":"1sjcrCOly_D_","executionInfo":{"status":"ok","timestamp":1678892613614,"user_tz":-330,"elapsed":3,"user":{"displayName":"Sabari Raj N","userId":"10864216411930033689"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["import re\n","#Use of IP or not in domain\n","def having_ip_address(url):\n","    match = re.search(\n","        '(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.'\n","        '([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\/)|'  # IPv4\n","        '((0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\/)' # IPv4 in hexadecimal\n","        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # Ipv6\n","    if match:\n","        # print match.group()\n","        return 1\n","    else:\n","        # print 'No matching pattern found'\n","        return 0\n","df['use_of_ip'] = df['url'].apply(lambda i: having_ip_address(i))\n","\n","from urllib.parse import urlparse\n","\n","def abnormal_url(url):\n","    hostname = urlparse(url).hostname\n","    hostname = str(hostname)\n","    match = re.search(hostname, url)\n","    if match:\n","        # print match.group()\n","        return 1\n","    else:\n","        # print 'No matching pattern found'\n","        return 0\n","\n","\n","df['abnormal_url'] = df['url'].apply(lambda i: abnormal_url(i))\n","\n","#pip install googlesearch-python\n","\n","from googlesearch import search\n","\n","def google_index(url):\n","    site = search(url, 5)\n","    return 1 if site else 0\n","df['google_index'] = df['url'].apply(lambda i: google_index(i))\n","\n","def count_dot(url):\n","    count_dot = url.count('.')\n","    return count_dot\n","\n","df['count.'] = df['url'].apply(lambda i: count_dot(i))\n","\n","def count_www(url):\n","    url.count('www')\n","    return url.count('www')\n","\n","df['count-www'] = df['url'].apply(lambda i: count_www(i))\n","\n","def count_atrate(url):\n","     \n","    return url.count('@')\n","\n","df['count@'] = df['url'].apply(lambda i: count_atrate(i))\n","\n","\n","def no_of_dir(url):\n","    urldir = urlparse(url).path\n","    return urldir.count('/')\n","\n","df['count_dir'] = df['url'].apply(lambda i: no_of_dir(i))\n","\n","def no_of_embed(url):\n","    urldir = urlparse(url).path\n","    return urldir.count('//')\n","\n","df['count_embed_domian'] = df['url'].apply(lambda i: no_of_embed(i))\n","\n","\n","def shortening_service(url):\n","    match = re.search('bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|'\n","                      'yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|'\n","                      'short\\.to|BudURL\\.com|ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|'\n","                      'doiop\\.com|short\\.ie|kl\\.am|wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|'\n","                      'db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|'\n","                      'q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|'\n","                      'x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|qr\\.net|1url\\.com|tweez\\.me|v\\.gd|'\n","                      'tr\\.im|link\\.zip\\.net',\n","                      url)\n","    if match:\n","        return 1\n","    else:\n","        return 0\n","    \n","df['short_url'] = df['url'].apply(lambda i: shortening_service(i))\n","\n","def count_https(url):\n","    return url.count('https')\n","\n","df['count-https'] = df['url'].apply(lambda i : count_https(i))\n","\n","def count_http(url):\n","    return url.count('http')\n","\n","df['count-http'] = df['url'].apply(lambda i : count_http(i))\n","\n","def count_per(url):\n","    return url.count('%')\n","\n","df['count%'] = df['url'].apply(lambda i : count_per(i))\n","\n","def count_ques(url):\n","    return url.count('?')\n","\n","df['count?'] = df['url'].apply(lambda i: count_ques(i))\n","\n","def count_hyphen(url):\n","    return url.count('-')\n","\n","df['count-'] = df['url'].apply(lambda i: count_hyphen(i))\n","\n","def count_equal(url):\n","    return url.count('=')\n","\n","df['count='] = df['url'].apply(lambda i: count_equal(i))\n","\n","def url_length(url):\n","    return len(str(url))\n","\n","\n","#Length of URL\n","df['url_length'] = df['url'].apply(lambda i: url_length(i))\n","#Hostname Length\n","\n","def hostname_length(url):\n","    return len(urlparse(url).netloc)\n","\n","df['hostname_length'] = df['url'].apply(lambda i: hostname_length(i))\n","\n","df.head()\n","\n","def suspicious_words(url):\n","    match = re.search('PayPal|login|signin|bank|account|update|free|lucky|service|bonus|ebayisapi|webscr',\n","                      url)\n","    if match:\n","        return 1\n","    else:\n","        return 0\n","df['sus_url'] = df['url'].apply(lambda i: suspicious_words(i))\n","\n","\n","def digit_count(url):\n","    digits = 0\n","    for i in url:\n","        if i.isnumeric():\n","            digits = digits + 1\n","    return digits\n","\n","\n","df['count-digits']= df['url'].apply(lambda i: digit_count(i))\n","\n","\n","def letter_count(url):\n","    letters = 0\n","    for i in url:\n","        if i.isalpha():\n","            letters = letters + 1\n","    return letters\n","\n","df['count-letters']= df['url'].apply(lambda i: letter_count(i))\n","\n","# pip install tld\n","\n","from urllib.parse import urlparse\n","!pip install tld\n","from tld import get_tld\n","import os.path\n","\n","#First Directory Length\n","def fd_length(url):\n","    urlpath= urlparse(url).path\n","    try:\n","        return len(urlpath.split('/')[1])\n","    except:\n","        return 0\n","\n","df['fd_length'] = df['url'].apply(lambda i: fd_length(i))\n","\n","#Length of Top Level Domain\n","df['tld'] = df['url'].apply(lambda i: get_tld(i,fail_silently=True))\n","\n","\n","def tld_length(tld):\n","    try:\n","        return len(tld)\n","    except:\n","        return -1\n","\n","df['tld_length'] = df['tld'].apply(lambda i: tld_length(i))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CP_yvxYvzIug","executionInfo":{"status":"ok","timestamp":1678893536245,"user_tz":-330,"elapsed":12304,"user":{"displayName":"Sabari Raj N","userId":"10864216411930033689"}},"outputId":"2f1c9649-c12e-4f91-b574-16f27938be16"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tld\n","  Downloading tld-0.13-py2.py3-none-any.whl (263 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m263.8/263.8 KB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: tld\n","Successfully installed tld-0.13\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","df=pd.read_csv('malicious_phish.csv')\n"],"metadata":{"id":"qvl8cBBD2USr","executionInfo":{"status":"ok","timestamp":1678893496568,"user_tz":-330,"elapsed":1090,"user":{"displayName":"Sabari Raj N","userId":"10864216411930033689"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","def get_prediction_from_url(test_url):\n","    features_test = main(test_url)\n","    \n","    # features_test = np.array(features_test).reshape((1, -1))\n","    features_test=np.reshape(features_test,(1,-1))\n","\n","\n","    import lightgbm as lgb\n","    features_test=loaded_model.predict(features_test)\n","\n","    if int(features_test[0]) == 0:\n","        \n","        res=\"SAFE\"\n","        return res\n","    elif int(features_test[0]) == 1.0:\n","        \n","        res=\"DEFACEMENT\"\n","        return res\n","    elif int(features_test[0]) == 2.0:\n","        res=\"PHISHING\"\n","        return res\n","        \n","    elif int(features_test[0]) == 3.0:\n","        \n","        res=\"MALWARE\"\n","        return res"],"metadata":{"id":"1rZeh50p2r3D","executionInfo":{"status":"ok","timestamp":1678893598063,"user_tz":-330,"elapsed":1372,"user":{"displayName":"Sabari Raj N","userId":"10864216411930033689"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["\n","urls = ['titaniumcorporate.co.za','http://results.skcet.ac.in:610/index.php/Welcome/Login','http://127.13.16.20:3000/index','https://placement.skcet.ac.in/','www.google.com']\n","\n","for url in urls:\n","     print(get_prediction_from_url(url))"],"metadata":{"id":"ScczZKV324TW","executionInfo":{"status":"ok","timestamp":1678893619502,"user_tz":-330,"elapsed":1508,"user":{"displayName":"Sabari Raj N","userId":"10864216411930033689"}},"outputId":"8368b732-aa7f-4ea1-9ba4-a01d023f3919","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["MALWARE\n","PHISHING\n","PHISHING\n","MALWARE\n","SAFE\n"]}]}]}